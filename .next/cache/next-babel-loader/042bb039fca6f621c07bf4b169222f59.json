{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt, faEnvelope, faStar, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport styled, { css } from 'styled-components';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { addSum, addData } from '../redux/actions/index';\n\nconst sumStateToProps = state => {\n  return {\n    sum: state.sum\n  };\n};\n\nconst dataStateToProps = state => {\n  return {\n    data: state.data\n  };\n};\n\nfunction sumDispatchToProps(dispatch) {\n  return {\n    addSum: sum => dispatch(addSum(sum))\n  };\n}\n\nfunction dataDispatchToProps(dispatch) {\n  return {\n    addData: data => dispatch(addData(data))\n  };\n}\n\nconst axiosGitHubGraphQL = axios.create({\n  baseURL: 'https://api.github.com/graphql',\n  headers: {\n    Authorization: 'bearer 2cdc2aa829e6a0fe455edaf962cdda54e923b505'\n  }\n});\nconst GET_RATE = `\n{\n    search(   \n      type: USER, query:\"location:Kharkiv sort:followers-desc\"\n      first: 10) {\n      nodes {\n        ... on User {\n          name\n          login\n          avatarUrl\n          url\n          bio\n          location\n          email\n          repositories{totalCount}\n          topRepositories(first: 100, orderBy:{field: STARGAZERS, direction: DESC}) {\n            edges {\n              node {\n                stargazers{totalCount}\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nconst Divider = styled.hr`\n    background: rgba(128, 128, 128, 0.5);\n    width: 700px;\n    margin-left: auto;\n    margin-right: auto;\n    height: 1px;\n    border: 0;\n`;\nconst Avatar = styled.img`\n    width: 75px;\n    margin-top: 10px;\n    border-radius: 10px;\n    margin-bottom: 10px;\n`;\nconst Info = styled.div`\n    display: flex;\n    width: 88%;\n    flex-flow: column;\n    margin-top: 10px;\n`;\nconst Login = styled.div`\n    width: 88%;\n    display: flex;\n`;\nconst Status = styled.div`\n    margin-top: 10px;\n    padding-left: 10px;\n`;\nconst Link = styled.a`\n    text-decoration: blink;\n    padding-left: 10px;\n    color: #2664d9;\n`;\nconst Name = styled.p`\n    padding-left: 10px;\n    margin: 0;\n`;\nconst Icons = styled.div`\n    display: flex;\n    margin-top: 10px;\n    color: #858585;\n`;\nconst LocationIcon = styled.div`\n    padding-left: 10px;\n`;\nconst MailIcon = styled.div`\n    padding-left: 40px;\n`;\nconst StarIcon = styled.div`\n    padding-left: 40px;\n`;\nconst Stars = styled.div`\n    padding-left: 10px;\n`;\nconst Location = styled.div`\n    padding-left: 10px;\n`;\nconst MailAdress = styled.div`\n    padding-left: 10px;\n`;\nconst Block = styled.div`\n    width: 700px;\n    margin-left: auto;\n    margin-right: auto;\n    display: flex;\n`;\nconst Loading = styled.div`\n    display: flex;\n    align-items: center;\n    height: 100vh;\n    justify-content: center;\n`;\n\nclass ConnectedUsers extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"GET_SUM_FIRST_HUNDRED\", login => `query \n{\n  search(   \n    type: USER, query:\"user:${login}\"\n    first: 1) {\n    nodes {\n      ... on User {\n        login\n        repositories (first:100) {\n      pageInfo {\n        hasNextPage,\n        endCursor\n      },\n      nodes {\n        stargazers{totalCount}\n      }\n      }\n    }\n  }\n}\n}`);\n\n    _defineProperty(this, \"GET_SUM_HUNDRED\", (login, after) => `query \n{\n  search(   \n    type: USER, query:\"user:${login}\"\n    first: 1) {\n    nodes {\n      ... on User {\n        login\n        repositories (first:100, after:\"${after}\") {\n      pageInfo {\n        hasNextPage,\n        endCursor\n      },\n      nodes {\n        stargazers{totalCount}\n      }\n      }\n    }\n  }\n}\n}`);\n\n    _defineProperty(this, \"onFetchSumHundredFromGitHub\", (user, number, endCursor) => {\n      const that = this;\n      const after = endCursor.toString();\n      const login = user;\n      const key = number;\n      axiosGitHubGraphQL.post('', {\n        query: that.GET_SUM_HUNDRED(login, after)\n      }).then(result => {\n        let array = result.data.data.search.nodes[0].repositories;\n        that.getSumHundred(array, key);\n      });\n    });\n\n    _defineProperty(this, \"onFetchSumForFirstHundredFromGitHub\", (user, number) => {\n      const that = this;\n      const login = user;\n      const key = number;\n      axiosGitHubGraphQL.post('', {\n        query: that.GET_SUM_FIRST_HUNDRED(login)\n      }).then(result => {\n        let array = result.data.data.search.nodes[0].repositories;\n        that.getSumFirstHundred(array, key, login);\n      });\n    });\n\n    _defineProperty(this, \"onFetchFromGitHub\", () => {\n      const that = this;\n      axiosGitHubGraphQL.post('', {\n        query: GET_RATE\n      }).then(result => {\n        let array = result.data.data.search.nodes;\n\n        for (var i = 0; i < 10; i++) {\n          this.props.addData({\n            data: [array[i].avatarUrl, array[i].bio, array[i].email, array[i].location, array[i].login, array[i].name, array[i].url]\n          });\n\n          if (array[i].repositories.totalCount > 100) {\n            that.onFetchSumForFirstHundredFromGitHub(array[i].login, i);\n          } else {\n            that.getSum(array[i].topRepositories.edges, i);\n          }\n        }\n      }).catch(function (error) {\n        alert(error);\n      });\n    });\n\n    this.getSum = this.getSum.bind(this);\n  }\n\n  componentDidMount() {\n    this.onFetchFromGitHub();\n  }\n\n  getSumHundred(array, number, name) {\n    let key = number;\n    let summ = 0;\n    const login = name;\n    const {\n      sum\n    } = this.props;\n    array.nodes.forEach(element => {\n      summ += element.stargazers.totalCount;\n    });\n    summ += sum[key];\n    this.props.addSum({\n      sum: [summ, key]\n    });\n  }\n\n  getSumFirstHundred(array, number, name) {\n    let key = number;\n    let sum = 0;\n    const login = name;\n    array.nodes.forEach(element => {\n      sum += element.stargazers.totalCount;\n    });\n    this.props.addSum({\n      sum: [sum, key]\n    });\n\n    if (array.pageInfo.hasNextPage === true) {\n      this.onFetchSumHundredFromGitHub(login, key, array.pageInfo.endCursor);\n    }\n  }\n\n  getSum(array, number) {\n    let key = number;\n    let sum = 0;\n\n    if (array !== undefined) {\n      array.forEach(element => {\n        sum += element.node.stargazers.totalCount;\n      });\n    }\n\n    this.props.addSum({\n      sum: [sum, key]\n    });\n  }\n\n  render() {\n    const {\n      data,\n      sum\n    } = this.props;\n    return __jsx(React.Fragment, null, data.length === 0 ? __jsx(Loading, null, __jsx(FontAwesomeIcon, {\n      icon: faSpinner,\n      size: \"4x\",\n      spin: true,\n      pulse: true\n    })) : __jsx(React.Fragment, null, __jsx(Divider, null), data.map(user => __jsx(React.Fragment, null, __jsx(Block, null, __jsx(Avatar, {\n      src: user.avatarUrl\n    }), __jsx(Info, null, __jsx(Login, null, __jsx(Link, {\n      href: user.url,\n      target: \"_blank\"\n    }, user.login), __jsx(Name, null, user.name)), __jsx(Status, null, user.bio), __jsx(Icons, null, __jsx(LocationIcon, null, __jsx(FontAwesomeIcon, {\n      size: \"xs\",\n      icon: faMapMarkerAlt\n    })), __jsx(Location, null, user.location), user.email !== '' ? __jsx(React.Fragment, null, __jsx(MailIcon, null, __jsx(FontAwesomeIcon, {\n      icon: faEnvelope,\n      size: \"xs\"\n    })), __jsx(MailAdress, null, user.email)) : null, __jsx(StarIcon, null, __jsx(FontAwesomeIcon, {\n      icon: faStar,\n      size: \"xs\"\n    })), __jsx(Stars, null, this.props.sum[data.indexOf(user)] === undefined ? ' ' : Number(this.props.sum[data.indexOf(user)]).toLocaleString())))), __jsx(Divider, null)))) // )\n    );\n  }\n\n}\n\nconst UsersWithSumState = connect(sumStateToProps, null)(ConnectedUsers);\nconst UsersWithDataState = connect(dataStateToProps, null)(UsersWithSumState);\nconst UsersWithSumDispatched = connect(null, sumDispatchToProps)(UsersWithDataState);\nconst Users = connect(null, dataDispatchToProps)(UsersWithSumDispatched);\nexport default Users;","map":null,"metadata":{},"sourceType":"module"}